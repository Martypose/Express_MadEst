#!/usr/bin/env node

/**
 * Module dependencies.
 */
const { app } = require("../app");
const debug = require("debug")("madest:server");
const https = require("https");
const fs = require("fs");
require("dotenv").config();
/**
 * Get port from environment and store in Express.
 */

// Importa la configuraci칩n de Socket.IO
const createSocket = require("../lib/socket");

const port = normalizePort(process.env.PORT || '443');
app.set('port', port);

const options = {
  key: fs.readFileSync(`${process.env.PATH_KEY}`),
  cert: fs.readFileSync(`${process.env.PATH_CER}`)
};

/**
 * Create HTTPS server.
 */

const httpsServer = https.createServer(options, app);

const io = createSocket(httpsServer);
/**
 * Listen on provided port, on all network interfaces.
 */
httpsServer.listen(port, '0.0.0.0');
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpsServer.address();
  if (addr === null) {
    console.log('El servidor est치 escuchando pero la direcci칩n no est치 disponible.');
  } else {
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}
